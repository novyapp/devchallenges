import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";

const initialData = [
  {
    id: 333232,
    text: "test task",
    isCompleted: false,
  },
];

type AppProps = {
  todo: {
    isCompleted: boolean;
    text: string;
  };
  index: number;
  removeTodo: (index: number) => void;
  completeTodo: (index: number) => void;
};

type AppProp = {
  addTodo: (todo: { id: number; isCompleted: boolean; text: string }) => void;
};

function Todo({ todo, index, completeTodo, removeTodo }: AppProps) {
  return (
    <div className="bg-white border border-zinc-100 p-2 hover:bg-zinc-100 flex  justify-start">
      <div className="flex space-x-2">
        <input
          type="checkbox"
          checked={todo.isCompleted}
          onChange={() => completeTodo(index)}
        />
        <div className={`${todo.isCompleted && "line-through"}`}>
          {todo.text}
        </div>
      </div>
      <button
        className="ml-auto h-6 w-6 rounded-md font-semibold items-center justify-center flex bg-red-600 text-white"
        onClick={() => removeTodo(index)}
      >
        x
      </button>
    </div>
  );
}

function TodoForm({ addTodo }: any) {
  const [value, setValue] = useState("");

  const handleSubmit = (e: React.SyntheticEvent) => {
    e.preventDefault();
    if (!value) return;
    console.log(value);
    addTodo(value);
    setValue("");
  };

  return (
    <form onSubmit={handleSubmit} className="py-4 space-x-2 flex">
      <input
        type="text"
        className="border border-zinc-100 rounded-md text-sm p-3 w-full outline-blue-500"
        placeholder="Add details"
        value={value}
        onChange={(e) => setValue(e.target.value)}
      />
      <button
        type="submit"
        className="bg-blue-500 rounded-md text-white p-1 px-3 shadow-md"
      >
        Add
      </button>
    </form>
  );
}

const Home: NextPage = () => {
  const [loading, setLoading] = useState(true);
  const [todos, setTodos] = useState(initialData);
  const [tabs, setTabs] = useState("all");

  const completedTasks = todos.filter((todo) => todo.isCompleted === true);
  const activeTasks = todos.filter((todo) => todo.isCompleted === false);

  useEffect(() => {
    // Perform localStorage action
    const item = localStorage.getItem("todos");
    if (item && loading) {
      setTodos(JSON.parse(item));
      setLoading(false);
    }
  }, []);
  useEffect(() => {
    if (!loading) localStorage.setItem("todos", JSON.stringify(todos));
  }, [todos]);

  const addTodo = (
    text: string,
    id = Date.now(),
    isCompleted: boolean = false
  ) => {
    const newTodos = [...todos, { id, text, isCompleted }];
    setTodos(newTodos);
  };
  const completeTodo = (index: number) => {
    const copyCompleted = todos.map((todo) => {
      if (todo.id === index) todo.isCompleted = !todo.isCompleted;

      return todo;
    });

    setTodos(copyCompleted);
  };
  const removeTodo = (idToDelete: number) => {
    console.log(idToDelete);
    setTodos((currentTodos) =>
      currentTodos.filter((todo) => todo.id !== idToDelete)
    );
  };

  const removeAllCompleted = () => {
    setTodos(activeTasks);
  };

  return (
    <>
      <Head>
        <title>Tabs App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="mx-auto flex flex-col min-h-screen p-4 w-3/12">
        <h1 className="text-4xl font-semibold flex justify-center py-4">
          #Todos
        </h1>
        <div className="flex space-x-4 border-b justify-between px-10">
          <div onClick={() => setTabs("all")} className={`relative p-2`}>
            All
            <span
              className={`${
                tabs === "all" &&
                "absolute border-b-4 rounded-t-lg bg-black bottom-0 left-0 w-full border-blue-500"
              }`}
            ></span>
          </div>
          <div onClick={() => setTabs("active")} className={`relative p-2`}>
            Active{" "}
            <span
              className={`${
                tabs === "active" &&
                "absolute border-b-4 rounded-t-lg bg-black bottom-0 left-0 w-full border-blue-500"
              }`}
            ></span>
          </div>
          <div onClick={() => setTabs("completed")} className={`relative p-2`}>
            Completed{" "}
            <span
              className={`${
                tabs === "completed" &&
                "absolute border-b-4 rounded-t-lg bg-black bottom-0 left-0 w-full border-blue-500"
              }`}
            ></span>
          </div>
        </div>
        <TodoForm addTodo={addTodo} />
        <div>
          <div className={`${tabs === "all" ? "block" : "hidden"}`}>
            {todos.map((todo, index) => (
              <Todo
                key={todo.id}
                index={todo.id}
                todo={todo}
                completeTodo={completeTodo}
                removeTodo={removeTodo}
              />
            ))}
          </div>
          <div className={`${tabs === "active" ? "block" : "hidden"}`}>
            {todos
              .filter((todo) => todo.isCompleted === false)
              .map((todo, index) => (
                <Todo
                  key={todo.id}
                  index={todo.id}
                  todo={todo}
                  completeTodo={completeTodo}
                  removeTodo={removeTodo}
                />
              ))}
          </div>
          <div
            className={`${
              tabs === "completed" ? "block" : "hidden"
            } flex flex-col w-full`}
          >
            {todos
              .filter((todo) => todo.isCompleted === true)
              .map((todo, index) => (
                <Todo
                  key={todo.id}
                  index={todo.id}
                  todo={todo}
                  completeTodo={completeTodo}
                  removeTodo={removeTodo}
                />
              ))}
            {completedTasks.length > 0 && (
              <button
                className="bg-red-500 rounded-md p-2 text-white text-sm w-24 mt-6 ml-auto"
                onClick={() => removeAllCompleted()}
              >
                Delete All
              </button>
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
